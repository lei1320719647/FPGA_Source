
#include <stdio.h>
#include <io.h>
#include <unistd.h>
#include "system.h"
#include "alt_types.h"
#include "altera_avalon_uart_regs.h"
#include "sys\alt_irq.h"
#include "stddef.h"
#include<string.h>    // strle、memcpy头文件


alt_u8 RxCounter=0;
alt_u8 RxBuffer[11];
alt_u8 Res=0;


/////////语音模块的数据
alt_u8 SYN_StopCom[]={0xFD,0X00,0X02,0X02,0XFD};     //停止合成
alt_u8 SYN_SuspendCom[]={0XFD,0X00,0X02,0X03,0XFC};   //暂停合成
alt_u8 SYN_RecoverCom[]={0XFD,0X00,0X02,0X04,0XFB};   //恢复合成
alt_u8 SYN_ChackCom[]={0XFD,0X00,0X02,0X21,0XDE};   //状态查询
alt_u8 SYN_PowerDownCom[]={0XFD,0X00,0X02,0X88,0X77}; //进入POWER DOWN 状态命令

float a[3]={0};
float w[3]={0};
float angle[3]={0};

float sample_v[5]={0};         //实时电压数据，AD采到的手指值
float sample_a[5]={0};         //实时角度数据，陀螺仪的值

float distance_v[43][2]={0};    //序号及电压记录表
float distance_a[7][2]={0};     //序号及电压记录表

float sheet_v[50][5]=       //////训练好的手指值
{
	{1.593, 2.889, 3.080, 3.129, 1.418},//初始值

	{1.072, 2.169, 2.245, 2.201, 0.714},//0
	{0.977, 2.130, 2.294, 2.269, 0.811},

	{1.076, 2.903, 2.104, 2.132, 0.661},//1
	{1.087, 2.952, 2.180, 2.126, 0.656},

	{0.941, 2.906, 3.141, 2.167, 0.749},//2
	{0.918, 2.932, 3.142, 2.080, 0.716},

	{0.964, 2.882, 3.106, 3.056, 0.814},//3
	{1.062, 2.877, 3.087, 2.843, 0.672},

	{0.991, 2.931, 3.123, 3.197, 1.531},//4
	{0.956, 2.942, 3.056, 2.967, 1.432},

	{1.697, 2.969, 3.101, 3.222, 1.437},//5
	{1.548, 2.972, 3.084, 2.992, 1.352},

	{1.771, 2.131, 2.335, 2.200, 1.480},//6
	{1.632, 2.146, 2.264, 2.079, 1.441},

	{1.665, 2.862, 3.019, 2.277, 0.577},//7
	{1.602, 2.756, 2.956, 2.127, 0.497},

	{1.742, 2.961, 2.137, 2.257, 0.635}, //8
	{1.401, 2.989, 2.164, 2.196, 0.621},

	{1.314, 2.265, 3.259, 3.250, 1.435}, //OK
	{1.156, 2.290, 3.238, 3.051, 1.402},

	{1.779, 2.056, 2.079, 2.089, 0.533},  //好
	{1.434, 2.153, 2.129, 2.087, 0.574},

	{0.892, 2.120, 2.194, 2.082, 0.563},  //谢谢
	{0.971, 2.124, 2.195, 2.232, 0.570},

	{0.875, 2.927, 2.129, 2.147, 0.643},   //你
	{0.836, 2.887, 2.336, 2.211, 0.596},

	{1.442, 2.873, 2.124, 3.123, 1.428},  //我
	{1.218, 2.889, 2.166, 3.088, 1.407},

	{0.846, 2.933, 3.120, 2.355, 0.728},//是
	{0.846, 2.958, 3.121, 2.276, 0.691},

	{1.656, 2.947, 2.166, 2.148, 0.654},//很
	{1.607, 3.008, 2.107, 2.180, 0.582},

	{1.370, 2.833, 3.211, 3.249, 1.463},//学生
	{1.473, 2.858, 3.138, 3.173, 1.349},

	{1.485, 2.099, 2.316, 2.144, 1.522},//见到
	{1.533, 2.149, 2.357, 2.136, 1.532},

	{0.819, 2.152, 2.345, 2.143, 1.460},//抱歉
	{0.714, 2.153, 2.296, 2.148, 1.438},

	{1.703, 3.054, 3.140, 3.264, 1.436},//们
	{1.725, 3.092, 3.155, 3.066, 1.420},

	{1.435, 2.585, 2.250, 2.223, 0.686},//名片
	{1.506, 2.499, 2.208, 2.211, 0.581}


};

float sheet_a[50][2]=     /////训练好的陀螺仪的值
{
	{63.98, 85.25},//初值

	{30.14, -75.22},//0
	{-134.46, -75.46},

	{92.19, -71.35},//1
	{-120.03, -74.59},

	{83.90, -67.80},//2
	{-113.19, -73.54},

	{106.09, -69.67},//3
	{-111.11, -75.10},

	{114.62, -72.26},//4
	{-140.51, -70.24},

	{102.01, -69.41},//5
	{-127.64, -74.04},

	{126.51, -57.44},//6
	{-157.90, -0.18},

	{170.78, -80.55},  //7
	{-170.01, -80.32},

	{99.07, -39.73},  //8
	{162.10, -53.83},

	{108.33, -80.97}, //OK
	{-118.49, -75.25},

	{108.56, -13.68},  //好
	{145.33, -30.72},

	{109.14, -17.57},  //谢谢
	{153.43, -30.36},

	{91.44, -3.66}, //你
	{104.76, -26.35},

	{94.00, -26.27}, //我
	{96.48, -16.24},

	{157.37, 11.12},//是
	{-162.28, 7.54},

	{141.70, 21.80},//很
	{-165.90, 17.29},

	{100.22, -20.25},//学生
	{113.40, -49.74},

	{80.81, 9.52},//见到
	{70.02, 17.59},

	{116.94, -14.32},//抱歉
	{154.51, -23.87},

	{3.73, -2.61},//们
	{-11.00, 0.48},

	{101.75, 33.71},//名片
	{116.56, 55.73}
};


void read_power(alt_u8 ch , alt_u16 *pRegValue);   ///AD转换函数

//void uart_write(char *string);    ////串口输出函数，没用

void uart_1_init();            //////串口1初始化函数
void uart_0_init();              //////串口0初始化函数
static void uart_isr(void * context,int id);   //////串口0中断函数;


void SYN_FrameInfo(alt_u8 *HZdata);      /////语音模块驱动程序
void PrintCom(alt_u8 *DAT,alt_u8 len);
void YS_SYN_Set(alt_u8 *Info_data);


/////AD 转换函数
void read_power(alt_u8 ch , alt_u16 *pRegValue)
{
 	int  Value;
 	// set measure number for ADC convert
 	IOWR(ADC_LTC2308_BASE, 0x01, 1);
 	// start measure
 	IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
 	IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x01);
 	IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
 	usleep(1);
 	while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);
 	Value = IORD(ADC_LTC2308_BASE, 0x01);
 	//printf("Value=%d\n",Value);
 	*pRegValue= Value;
 }

/////单字节发送函数，串口1驱动语音模块
void PrintCom(alt_u8 *DAT,alt_u8 len)
{
	alt_u8 i;
	for(i=0;i<len;i++)
	{
	   while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE)& ALTERA_AVALON_UART_STATUS_TRDY_MSK));
	   IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, DAT[i]);
	}
}

//////多字节发送函数，合成语音帧
void SYN_FrameInfo(alt_u8 *HZdata)
{
/****************需要发送的文本**********************************/
	 unsigned  char  Frame_Info[50];    //定义文本长度
	 unsigned  char  HZ_Length;
	 HZ_Length =strlen(HZdata); //需要发送的文本长度
/*****************帧固定信息配置**************************************/
	 Frame_Info[0] = 0xFD ; 			//帧头FD
	 Frame_Info[1] = 0x00 ; 			//数据长度高字节
	 Frame_Info[2] = HZ_Length + 6; 		//数据长度低字节
	 Frame_Info[3] = 0x01 ; 			//构造命令：合成播放语音
	 Frame_Info[4] = 0x01;      //文本格式：GBK
	 Frame_Info[5] = 0x5B;
	 Frame_Info[6] = 0x68;
	 Frame_Info[7] = 0x30;
	 Frame_Info[8] = 0x5D;
	 memcpy(&Frame_Info[9], HZdata, HZ_Length);
	 PrintCom(Frame_Info,9+HZ_Length);//发送帧配置
}

/*********************语音模块初始化******************************/
void YS_SYN_Set(alt_u8 *Info_data)
{
	alt_u8 Com_Len;
	Com_Len =strlen(Info_data);
	PrintCom(Info_data,Com_Len);
}

static void uart_isr(void * context,int id)     //////串口0中断函数,接收陀螺仪的数据
{
	alt_u16 status;
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);

	if(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
	{

		Res= IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);

		RxBuffer[RxCounter]=Res;

		RxCounter++;

	   if(RxBuffer[0]!=0x55)	RxCounter=0;
	   else
	  	{
		   switch(RxBuffer[1])
			{
			   case 0x51:
				   {
					  a[0] = ((short)(RxBuffer[3]<<8 | RxBuffer[2]))/32768.0*16;
					  a[1] = ((short)(RxBuffer[5]<<8 | RxBuffer[4]))/32768.0*16;
					  a[2] = ((short)(RxBuffer[7]<<8 | RxBuffer[6]))/32768.0*16;
					  break;
				   }

			   case 0x52:
			      {
					  w[0] = ((short)(RxBuffer[3]<<8| RxBuffer[2]))/32768.0*2000;
					  w[1] = ((short)(RxBuffer[5]<<8| RxBuffer[4]))/32768.0*2000;
					  w[2] = ((short)(RxBuffer[7]<<8| RxBuffer[6]))/32768.0*2000;
					  break;
				  }

			   case 0x53:
	             {
					  angle[0] = ((short)(RxBuffer[3]<<8| RxBuffer[2]))/32768.0*180;
					  angle[1] = ((short)(RxBuffer[5]<<8| RxBuffer[4]))/32768.0*180;
					  angle[2] = ((short)(RxBuffer[7]<<8| RxBuffer[6]))/32768.0*180;
					  break;
				 }
			  default:  break;
			}
	  	  }

		if(RxCounter>10)    RxCounter=0;    ////接收错误，重新开始
	}

}
//////串口0初始化
void uart_0_init()
{
	alt_irq_register(UART_0_IRQ,NULL,uart_isr);      //alt_irq_register(UART_TTL_IRQ,0,uart_stm32_isr);////注册串口中断服务程
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE,0);
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE,0X80);
}
//////串口1初始化
void uart_1_init()     //串口1发送语音给语音模块
{
	alt_irq_register(UART_1_IRQ,NULL,0);
	IOWR_ALTERA_AVALON_UART_STATUS(UART_1_BASE,0);
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_1_BASE,0X80);
}

int main()
{
	alt_u8 i,j,k,q=64;
	SYN_FrameInfo("基于FPGA的手语翻译设计");usleep(2000*2000);
	SYN_FrameInfo("现在开始为您进行演示");usleep(2000*1000);
	float sum,d,m,f;
	char n;
	alt_u16 Data0,Data1,Data2,Data3,Data4;
	char szADC_Data[70]={0};
	uart_0_init();
	usleep(100*1000);
	uart_1_init();
	while(1)
	{


			if( (-2<w[0])&&(w[0]<2)&&(-2<w[1])&&(w[1]<2)&&(-2<w[2])&&(w[2]<2))
			{
					usleep(16*1000);
					///读取AD、陀螺仪角度值
					if( (-2<w[0])&&(w[0]<2)&&(-2<w[1])&&(w[1]<2)&&(-2<w[2])&&(w[2]<2))
					{
						 sample_a[0]=angle[0];
						 sample_a[1]=angle[1];

						 read_power(0x00,&Data0);
						 read_power(0x01,&Data1);
						 read_power(0x02,&Data2);
						 read_power(0x03,&Data3);
						 read_power(0x04,&Data4);
						 //usleep(1000);
						 sample_v[0]=(float)Data0/1000.0;
						 sample_v[1]=(float)Data1/1000.0;
						 sample_v[2]=(float)Data2/1000.0;
						 sample_v[3]=(float)Data3/1000.0;
						 sample_v[4]=(float)Data4/1000.0;
					}
					//相关性运算（距离，未开方）
		    	 	for(i=0;i<43;i++)
					  {
							for(j=0;j<5;j++)
								{
								  sum=sum+(sheet_v[i][j]-sample_v[j])*(sheet_v[i][j]-sample_v[j]);  ///5个手指头的误差平方和
								}
							distance_v[i][0]=i;
							distance_v[i][1]=sum;
							sum=0;
					  }
					 //冒泡排序，计算得出序号（第一列）

					 for(i=0;i<5;i++)
					  {
						   for(j=43;j>i;j--)
						   {
								if(distance_v[j-1][1]>distance_v[j][1])
								 {
									d=distance_v[j][1];     //电压交换
									n=distance_v[j][0];     //序号交换
									distance_v[j][1]=distance_v[j-1][1];
									distance_v[j][0]=distance_v[j-1][0];
									distance_v[j-1][1]=d;
									distance_v[j-1][0]=n;
								 }
						   }
					  }
					 //选取靠前的n个数据+电压距离约束（经验）
					  sum=0;
					  for(i=0;i<5;i++)
					  {
							k=distance_v[i][0];     //提取前k个序列号
							for(j=0;j<2;j++)
							 {
								sum=sum+(sheet_a[k][j]-sample_a[j])*(sheet_a[k][j]-sample_a[j]);
							 }
							 distance_a[i][0]=k;
							 distance_a[i][1]=sum;
							 sum=0;
					  }
					  //初始化数据
					  m=distance_a[0][1];
					  k=distance_a[0][0];
					 ////查找最小
					  for(i=0;i<5;i++)
					  {
						  if(distance_v[i][1]>=0.2)
							 break;
						   if(m>=distance_a[i][1])
							{
							   m=distance_a[i][1];
							   k=distance_a[i][0];
							}
					  }
					  	if(q!=k)
				 {
					 q=k;  /////输出对应的中文
					 switch(k)
					 		{
					 			case 1 : {SYN_FrameInfo("0");k=0;break;}
					 			case 3 : {SYN_FrameInfo("1");k=0;break;}
					 			case 5 : {SYN_FrameInfo("2");k=0;break;}
					 			case 7 : {SYN_FrameInfo("3");k=0;break;}
					 			case 9 : {SYN_FrameInfo("4");k=0;break;}
					 			case 11 : {SYN_FrameInfo("5");k=0;break;}
					 			case 13 : {SYN_FrameInfo("6");k=0;break;}
					 			case 15 : {SYN_FrameInfo("7");k=0;break;}
					 			case 17 : {SYN_FrameInfo("8");k=0;break;}
					 			case 20 : {SYN_FrameInfo("ok");k=0;break;}
					 			case 22 : {SYN_FrameInfo("好");k=0;break;}
					 			case 24 : {SYN_FrameInfo("谢谢");k=0;break;}
					 			case 25 : {SYN_FrameInfo("你");k=0;break;}
					 			case 27 : {SYN_FrameInfo("我");k=0;break;}
								case 29 : {SYN_FrameInfo("是");k=0;break;}
								case 31 : {SYN_FrameInfo("很");k=0;break;}
								case 33 : {SYN_FrameInfo("学生");k=0;break;}
								case 35 : {SYN_FrameInfo("见到");k=0;break;}
								case 37 : {SYN_FrameInfo("抱歉");k=0;break;}
								case 39 : {SYN_FrameInfo("们");k=0;break;}
								case 41 : {SYN_FrameInfo("名片");k=0;break;}

					 		}
				 }
			}
    }   // while出口

	return 0;
}    ///主函数出口



